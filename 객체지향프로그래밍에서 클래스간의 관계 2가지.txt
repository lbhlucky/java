객체지향 프로그래밍에서 클래스간의 관계 2가지

1. Has - a 관계 (포함)
   => A has a B (A가 B를 포함한다.)
      - 어떤 클래스 내에서 또 다른 특정 클래스를 포함시켜 사용
        (다른 클래스의 인스턴스를 생성하여 사용하는 것)
      - 가장 일반적인 클래스간의 관계
      - ex) 자동차 has a 엔진, 자동차 has a 에어컨, 자동차 has a 라디오 .....

2. Is - a 관계 (상속)
   => A is a B (A는 B이다 = B를 상속받아 A를 구현한다.)
      - 어떤 클래스가 또 다른 특정 클래스로부터 상속받아 사용
      - (다른 클래스가 가진 멤버들을 아무런 선언없이 상속받아 사용)
      - 객체지향에서의 핵심적인 클래스간의 관계
      - ex) 초등학생 is a 학생, 스마트폰 is a 핸드폰, 스파이더맨 is a 사람

=========================================================================================

상속에 필요한 작업
 - 슈퍼클래스와 서브클래스의 역할 결정 및 정의
 - 추상화(일반화)와 구체화 방법을 통해 정의

1) 추상화(일반화) - 슈퍼클래스 생성 가능

   - 대상 객체의 공통된 특성을 추출하여 상위 개념을 정의하는 것
     ex) 초등학생, 중학생, 고등학생 => 학생

2) 구체화 - 서브클래스 생성 가능

   - 대상 객체의 특성과 추가적인 특징을 결합하여 하위 개념을 정의한 것
     ex) 학생 + 수능 => 고등학생
         학생 + 동아리 => 대학생

=========================================================================================

1. 추상화(일반화) 예시 --- 슈퍼클래스 생성 가능

  1) 갤럭시S : 삼성 제조, 지문인식, 카메라, 전화, 문자, 카톡, 삼성페이, ...
  2) 아이폰 : 애플 제조, 지문인식, 카메라, 전화, 문자, 카톡, 애플페이, ...
  => 두 대상의 공통점(카메라, 전화, 문자, 카톡, ...)을 추출하여
     추상화 결과인 스마트폰(SmartPhone)이 추출됨

2. 구체화 예시 --- 서브클래스 생성 가능

  - 자동차 : 엔진, 에어컨, 라디오, 전진, 후진, ...
  => 자동차의 기본 기능 + 손님 태우기 기능을 추가하여 택시(Taxi) 정의 가능
  => 자동차의 기본 기능 + 짐 싣기 기능을 추가하여 트럭(Truck) 정의 가능