public class Ex {

	public static void main(String[] args) {
	/*
	 * 메서드(Method)
	 * 
	 * - 객체의 동작(기능)을 담당하는 요소
	 * - 반드시 호출되어야만 사용 가능
	 *   (특정 메서드를 호출하는 메서드 : Caller 메서드)
	 *   (호출 당해서 작업을 수행하는 메서드 : Worker 메서드)
	 * - 메서드 구현부(바디) 내에서 작업을 수행하는 도중
	 *   호출한 곳으로 되돌아가려면 return문을 사용
	 *   (단, 리턴타입에 따라 return문 뒤에 데이터를 명시할 수도 있고,
	 *   return문 자체를 생략할 수도 있음)
	 * - 매개변수는 1개 이상의 변수를 선언할 수 있지만
	 *   리턴값은 1개만 리턴 가능(동시에 2개 티상 리턴 불가)
	 * 
	 * < 메서드 정의 기본 문법 >
	 * 
	 * [제어자] 리턴타입 메이서드명([매개변수선언]...) {
	 * 
	 * 			// 메서드가 호출되면 실행될 코드들...
	 * 			[return [값];]
	 * }
	 * 
	 * => 제어자 : 생략이 가능하며, 차후에 배움
	 *    리턴타입 : 메서드 실행 후 리턴되는 결과값의 데이터타입
	 *              (리턴값이 없을 때 특수한 데이터 타입인 void 사용)
	 *    메서드명 : 호출할 때 사용할 이름을 지정, 식별자 작성 규칙 적용
	 *    매개변수 : 메서드 호출 시 전달할 데이터를 저장할 변수 선언
	 *    => 위의 요소가 포함되는 부분을 메서드 헤더(선언부)라고 함
	 *    => 매개변수 (Parameter, 파라미터)라고하며,
	 *       매개변수에 전달할 데이터를 전달인자(Argument, 아규먼트)라고 한다.
	 * => 메서드 선언부 뒤의 중괄호{}에 해당하는 부분은
	 *    메서드가 호출되면 실행될 코드들이 기술되는 부분이며
	 *    메서드 바디(구현부)라고 함
	 *    
	 * < 메서드 정의 형태에 따른 분류 >
	 * 1. 매개변수도 없고, 리턴값도 없는 메서드	// Caller가 Worker에게 줄게없음. Worker가 Caller에게 받은게 없으니 돌려줄거도 없음
	 * 2. 매개변수는 없고, 리턴값만 있는 메서드
	 * 3. 매개변수만 있고, 리턴값은 없는 메서드
	 * 4. 매개변수도 있고, 리턴값도 있는 메서드   
	 * 
	 */
		
	//  1. 매개변수도 없고, 리턴값도 없는 메서드 호출
	System.out.println("동생아! 불 좀 꺼라!");
	// => sister_() 매서드는 매겨변수가 없으므로
	//    메서드 호출 시 소괄호 내에 아무 데이터도 전달하지 못함
	sister_1();		// sister_1 메서드 호출
	System.out.println("동생이 불을 끄고 갔다!");
	
	System.out.println("===================================================================");
	
	// 2. 매개변수는 없고, 리턴값만 있는 메서드
	// => sister_() 매서드는 매겨변수가 없으므로
	//    메서드 호출 시 소괄호 내에 아무 데이터도 전달하지 못함
	// => 리턴값이 있으므로 변수에 리턴값을 저장하거나
	//    출력문 등에 바로 사용할 수도 있음
	System.out.println("동생아! 물 좀!");
//	sister_2();
	String result = sister_2();	// 리턴값을 result 변수에 저장
	System.out.println("동생이 가져다 준 것! : " +result);
// -----------------------------------------------------------------------------------------
	System.out.println("동생이 가져다 준 것! : " +sister_2());	// 리턴값을 출력문에 바로 사용
// -----------------------------------------------------------------------------------------
	// 주의! 리턴값이 없는 메서드는 변수에 저장 또는 출력문에 사용 불가
		//	result = sister_1();	// 오류발생 ! : 리턴타입이 void이므로 저장불가

	System.out.println("=================================================================");

// -----------------------------------------------------------------------------------------
	//	3. 매개변수만 있고, 리턴값은 없는 메서드
	System.out.println("동생아! 200원 줄테니 과자 사 먹어라!");
	// => 매개변수가 있으므로 메서드 호출 시점에서 소괄호에 데이터 전달 피룡
	//    (전달할 데이터는 변수 또는 리터럴 사용 가능)
	sister_3(200);	// 메서드 호출시 정수 200을 전달
//	int money = 200;
//	sister_3(money);	// 메서드 호출 시 정수형 변수를 전달
	
	// => 만약, 메서드 파라미터(매개변수)부분에 아무것도 전달하지 않으면
//	sister_3()	// 오류 발생! 매개변수 타입 및 갯수와 일치해야함
	System.out.println("=================================================================");

// -----------------------------------------------------------------------------------------
	// 4. 매개변수도 있고, 리턴값도 있는 메서드
	System.out.println("동생아! 200원 줄테니 새우깡 좀 사다 도!");
	// sister_4() 메서드 호출 시 매개변수에 전달할 데이터가 필요
	String snack = sister_4(200);
	// => 메서드 작업 종료 후 문자열이 리턴되므로 변수snack에 저장
	System.out.println("동생이 사다 준 것 : " +snack);
	
	System.out.println("=================================================================");

// -----------------------------------------------------------------------------------------
	// 5. 매개변수가 2개 이상인 메서드
	// => 3번 또는 4번 유형 메서드에서 전달할 데이터가 2개 이상인 경우
	// => 각 데이터를 콤마(,)로 구분하여 전달
	System.out.println("동생아! 1000원 줄테니 새우깡을 쿠크다스로 바꿔온나!");
	snack = sister_5("새우깡", 1000);	// String, int 순으로 전달
	System.out.println("동생이 바꿔다 준 것 : " +snack);
	
	
	
	
	}	// main()메서드 끝
	
	//  1. 매개변수도 없고, 리턴값도 없는 메서드 정의
	// => 리턴값이 없으므로, 리턴타입 부분에 특주 자료형인 void를 명시
	// => 매개변수가 없으므로 매서드 선언부 소괄호() 안을 비워둠
	public static void sister_1() {
		System.out.println("동생 : 오빠가 불 끄라고 시켜서 불을 껐다!");
		
		// 리턴타입이 void인 메서드에는 return 문 사요은 가능하나
		// return 문 뒤에 아무런 데이터도 지정하지 못함
		return;	// 현재 메서드 수행을 종료하고 돌아가라는 의미 (생략 가능)
	}
	
	//  2. 매개변수는 없고, 리턴값만 있는 메서드 정의
	// => 리턴값이 있으므로, 리턴값에 해당하는 자료형을 명시
	// => 매개변수가 없으므로 매서드 선언부 소괄호() 안을 비워둠
	public static String sister_2() {
		System.out.println("동생 : 오빠가 물 떠오라고 시켰다!");
		String water = "물";
		System.out.println("동생 : 오빠에게 물을 떠다 줬다!");
		
		// 리턴값이 있으므로 메서드 작업 종류 부분에 return을 명시하고
		// return문 뒤에 리턴할 데이터(변수 또는 리터럴)을 명시
		return water;	// 변수지정 또는
//		return "물";	// 리터럴 지정 가능
		// => return 할 데이터타입이 String이므로 리턴 타입에 String을 명시
	}
	// 3. 매개변수만 있고, 리턴값은 없는 메서드
	// => 리턴값이 없으므로 리턴타입에 void 명시
	// => 메서드 호출시 정수 1개를 전달하므로 정수를 저장할 매개변수 필수!
	public static void sister_3(int money) {
		// => Caller로부터 전달받은 정수 데이터를 매개변수 money에 저장
		//    (메서드 내에서 int money = x; 형태의 문장과 동일하게 사용됨)
		System.out.println("동생 : 오빠가 과자 사 먹으라고 준 돈 : " +money + "원");
		money -= 200;
		System.out.println("동생 : 오빠가 준 돈으로 과자 사먹었다!");
		System.out.println("동생 : 남은 돈 : " + money + "원");
		
		// 리턴타입이 void이므로 리턴할 데이터가 없음
		// return형태로 명시하거나 생략 가능!
//		return;
	}
		
	// 4. 매개변수도 있고, 리턴값도 있는 메서드  
	// => 리턴값이 있으므로, 리턴타입 부분에 리턴할 데이터타입 명시
	// => 매개변수가 있으므로 소괄호()안에 전달받은 데이터 저장 변수 선언
	public static String sister_4(int money) {
		// 외부로부터 전달받은 정수 1개가 변수 money에 저장됨
		System.out.println("동생 : 오빠가 과자 사오라고" + money + "원을 줬다.");
		money -= 200;
		System.out.println("동생 : 새우깡 사고 " + money + "원이 남았다.");
		
		// 리턴 타입이 String 이므로 String 타입 데이터가 리턴되어있음
		return "새우깡";
	}
	
	// 5. 매개변수가 2개 이상인 메서드
	// => 매개 변수가 여러개일 때 해당 갯수와 타입 만큼 변수 선언 필요
	//    주의 사항! 전달된 데이터의 순서대로 선언해야함!!
	public static String sister_5(String snack, int money) {
		// "새우깡"과 1000을 전달했으므로 String, int 순으로 변수선언필요!
		System.out.println("동생 : 오빠가 준 과자 = " +snack);
		System.out.println("동생 : 오빠가 준 돈 = " +money);
		money -= 1000;
		snack = "쿠크다스";
		
		return snack;
	}
		
		
		
	
	
	
}	// Ex 클래스 끝
