- 자바의 특징(WORA, JVM, Garbage Collector 등)
  1) WORA : 뭘까요~?
  2) JVM : 자바 가상머신으로 : 자바에서 모든언어를 호환하도로 컴파일시 동작하는 프로그램
  3) GC : 메모리를 효율적으로 관리하기위해 사용하지않는 메모리공간을 정리해주는 프로그램

- 변수명 작성 규칙(식별자 작성 규칙)
  1) 변수 첫글 자 숫자 사용 불가
  2) 키워드(예약어) 사용 불가
  3) 대소문자 구분
  4) 특수 문자 $, _ 만 사용 가능
  5) 공백 사용 불가
  6) 길이 제한 없음

- 기본 자료형 변수 선언 및 초기화 방법
  1) 정수형 : byte(1byte) short(2byte) int(4byte) long(8byte)
  2) 실수형 :                          float(4byte) double(8byte)
  3) 문자형 :             char(2byte)
  4) 논리형 : boolean(1byte)

- 기본 자료형의 기본값
  1) 정수형 : 0
  2) 실수형 : 0.0
  3) 문자형 : null , 0???
  4) 논리형 : false
  5) 참조형 : null

- 논리연산자 종류 및 특징
  1) && or &(AND) : 좌항과 우항이 모두 true일 경우 true
  2) || or |(OR) : 좌항과 우항 중 둘 중 하나라도 true 이면 true
  3) ^(XOR) : 좌항과 우항이 서로 다를 때만 true
  4) !(NOT) : 결과를 반대로 만들어줌 (ex. true -> false , false -> true)

- if문 사용법(양수&음수 판별, 홀수&짝수 판별 등)
  if(조건식) {참일 경우 실행 문장}
  if(조건식) {참일 경우 실행 문장} else {거짓일 경우 실행 문장}
  if(조건식) {참일 경우 실행 문장} else if(조건식) {참일 경우 실행문장} else {거짓일 경우 실행문장}

  if(num % 2 == 0) {	// 짝수판별
  System.out.println("짝수");
  } else if (num %  2 == 1) {	// 홀수 판별
  System.out.println("홀수");
  } else {
   System.out.println("0입니다.");
  }

  if (num > 0 ){		// 양수 판별
  System.out.println("양수");
  } else if (num < 0) {		// 음수 판별	
  System.out.println("음수");
  } else { 
  System.out.println("0입니다.");
  } 

- for문 사용법(구구단)
  for(초기식;조건식;증감식){}  

  for(int i = 2 ; i < 10 ; i ++) {
     System.out.println("< " + i + "단 >");
    for(int j = 1 ; j < 10 ; j++) {
     System.out.println(i + " * " + j + " = " + i*j);
    }
    System.out.println();
  }

- Switch – Case 문(기본 문법, 특징, break 문 유무에 따른 차이점)
  Switch(조건식)
  case 값: break;
  default: break;

  Switch-case문에서 break문을 만나면 이 후 연산과정을 생략하고
  반복문 밖으로 빠져나감
  만약, break문이 없다면 break문을 만날때까지 계속 반복함
  continue문을 만날 경우 해당 과정만 생략하고 다음 반복 과정으로 넘어감

- 배열(배열 선언, 생성, 초기화)
  int[] 변수명 = {인덱스...} ;

- 객체지향 프로그래밍 특징(캡슐화, 다형성, 상속성, 추상화)
  A.P.I.E
캡슐화 : 데이터 은닉을 통해 안정성 확보
다형성 : 오버라이딩와 인터페이스를 활용하여 필요에 따라 다채롭게 사용가능
상속성 : 부모클래스에서 선언한 멤버(변수,메서드)를 상속을 통해 자식클래스에서 선언없이 사용가능
추상화 : 많은 클래스들이 공통적으로 가지고있는 멤버를 따로 정의해 코드의 중복을 없애줌

===> 코드 중복 제거, 코드 재사용성 올라감  

- 클래스(클래스 정의, 레퍼런스 변수 선언, 인스턴스 생성, 인스턴스 변수 초기화)
 [접근지정자] class 클래스명 {
 [접근지정자] 데이터타입 변수명;
}

  클래스명 변수명 = new 클래스명();
  
  인스턴스변수는 주로 생성자를 통해 초기화를 한다.

- 상속(서브클래스 정의, 상속받은 변수 활용한 메서드 정의)
  [접근지정자] class 클래스명 extends 부모클래스명 {
	데이터타입 변수;
  public 리턴타입 메서드명([매개변수..]) {
    System.out.println("상속받은 변수 : " +super.부모클래스에서 정의한 변수);
  }
}

- 접근지정자 종류 및 특징
  1) public     : 누구든 호출 해서 사용 가능
  2) protective : 상속관계이면 사용 가능
  3) default    : 같은 패키지이면 사용가능
  4) private    : 같은 클래스 내에서만 사용가능

- 레퍼런스 형변환에 사용되는 연산자
  - 형변환 연산자로 캐스팅연산자라고도 함
  - 좌항의 데이터타입을 우항앞에 적어준다.

- API
  자바에서 자주 사용하는 클래스들을 패키지로 모아서 제공해주는 기능?


- 패키지(import 가 필요 없는 기본 패키지, import 단축키)
  1) java.lang
  단축키 : ctrl + Shift + o